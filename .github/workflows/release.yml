name: Release OpenCode-RS

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # Trigger on tags like v1.0.0, v1.2.3-beta
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo tests
        run: cargo test --workspace --verbose

      - name: Run cargo clippy
        run: cargo clippy --workspace -- -D warnings

  build-cli:
    name: Build CLI - ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: opencode-aarch64-apple-darwin.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: opencode-x86_64-apple-darwin.tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: opencode-x86_64-linux-musl.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: opencode-x86_64-windows-msvc.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (for MUSL build)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build CLI binary
        run: cargo build --release --workspace --bin opencode --target ${{ matrix.target }}
      
      - name: Package CLI binary
        shell: bash
        run: |
          # The binary path differs between Windows and other OSes
          if [ "${{ runner.os }}" = "Windows" ]; then
            cd target/${{ matrix.target }}/release
            7z a ../../../${{ matrix.asset_name }} opencode.exe
            cd -
          else
            cd target/${{ matrix.target }}/release
            tar czf ../../../${{ matrix.asset_name }} opencode
            cd -
          fi

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ./${{ matrix.asset_name }}

  build-gui:
    name: Build GUI - ${{ matrix.platform }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            os: macos-latest
          - platform: 'ubuntu-20.04'
            os: ubuntu-20.04
          - platform: 'windows-latest'
            os: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile
        working-directory: crates/opencode-gui

      - name: Build and release Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: crates/opencode-gui
          tagName: ${{ github.ref_name }}
          releaseName: "OpenCode-RS ${{ github.ref_name }}"
          releaseBody: "See CHANGELOG.md for details."
          releaseDraft: true
          prerelease: contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha')

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-cli, build-gui]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha')
          files: |
            ./artifacts/**/*
          body: |
            ## Release Notes
            
            This release includes:
            - Cross-platform CLI binaries for macOS, Linux, and Windows
            - GUI application bundles built with Tauri
            - Performance improvements and bug fixes
            
            ### Installation
            
            **CLI Installation:**
            - macOS: `brew install your-org/tap/opencode`
            - Linux/macOS: `curl -fsSL https://raw.githubusercontent.com/your-org/opencode-rs/main/scripts/install.sh | sh`
            - Windows: `scoop bucket add your-org https://github.com/your-org/scoop-bucket && scoop install opencode`
            
            **GUI Installation:**
            - Download the appropriate installer for your platform from the assets below
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}