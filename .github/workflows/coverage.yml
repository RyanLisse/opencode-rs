name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  MINIMUM_COVERAGE: 100.0

jobs:
  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Run tests with coverage
      run: |
        cargo tarpaulin \
          --workspace \
          --all-features \
          --timeout 300 \
          --out Json \
          --out Html \
          --out Lcov \
          --output-dir coverage \
          --ignore-panics \
          --ignore-tests \
          --exclude-files "target/*" \
          --exclude-files "*/tests/*" \
          --exclude-files "*/test_utils/*"
          
    - name: Analyze coverage results
      id: coverage
      run: |
        # Extract coverage percentage from JSON
        COVERAGE=$(python3 -c "
        import json
        with open('coverage/tarpaulin-report.json', 'r') as f:
            data = json.load(f)
        files = data['files'].values() if 'files' in data else []
        total_lines = sum(file_data.get('summary', {}).get('lines', {}).get('total', 0) for file_data in files)
        covered_lines = sum(file_data.get('summary', {}).get('lines', {}).get('covered', 0) for file_data in files)
        percentage = (covered_lines / total_lines * 100) if total_lines > 0 else 0
        print(f'{percentage:.2f}')
        ")
        
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Coverage:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        echo "- **Minimum Required:** $MINIMUM_COVERAGE%" >> $GITHUB_STEP_SUMMARY
        
        # Check if coverage meets requirements
        if (( $(echo "$COVERAGE >= $MINIMUM_COVERAGE" | bc -l) )); then
          echo "- **Status:** ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "status=passed" >> $GITHUB_OUTPUT
        else
          echo "- **Status:** ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          echo "status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage/
          !coverage/*.json
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: coverage/lcov.info
        fail_ci_if_error: true
        verbose: true
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          const status = '${{ steps.coverage.outputs.status }}';
          const minCoverage = '${{ env.MINIMUM_COVERAGE }}';
          
          const statusIcon = status === 'passed' ? '✅' : '❌';
          const statusText = status === 'passed' ? 'PASSED' : 'FAILED';
          
          const body = `## ${statusIcon} Test Coverage Report
          
          | Metric | Value |
          |--------|-------|
          | **Coverage** | ${coverage}% |
          | **Required** | ${minCoverage}% |
          | **Status** | ${statusText} |
          
          ${status === 'failed' ? '⚠️ **Coverage below required threshold!** Please add tests to increase coverage.' : '🎉 **Great job!** Coverage requirements met.'}
          
          [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
          
    - name: Fail if coverage below threshold
      if: steps.coverage.outputs.status == 'failed'
      run: |
        echo "❌ Coverage ${{ steps.coverage.outputs.coverage }}% is below required ${{ env.MINIMUM_COVERAGE }}%"
        exit 1
        
    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        COVERAGE="${{ steps.coverage.outputs.coverage }}"
        if (( $(echo "$COVERAGE >= 95" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        
        # Create badge SVG
        curl -s "https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}" > coverage-badge.svg
        
    - name: Deploy coverage badge
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        destination_dir: badges
        keep_files: true
        publish_branch: gh-pages
        include_files: coverage-badge.svg